from collections import OrderedDict, UserList
from collections.abc import Iterable
import csv
import re
from dataclasses import dataclass, field
from io import TextIOWrapper
from pathlib import PurePath
from tokenize import String
from typing import Iterator, NamedTuple
from abc import ABC, abstractmethod

import requests
import yaml
from PIL import ImageColor
from tomlkit import TOMLDocument, comment, document, nl, table, array
from tomlkit.items import Item
from gonzago.colors import Color


class PaletteEntry:
    def __init__(
        self,
        name: str,
        description: str | None = None,
        color: Color = Color(0.0, 0.0, 0.0),
    ):
        self.name = name
        self.description = description
        self.color = color


class Palette(UserList[PaletteEntry]):
    def __init__(
        self,
        name: str,
        description: str | None = None,
        entries: Iterable[PaletteEntry] | None = None,
    ):
        self.name = name
        self.description = description
        super().__init__(entries)


def download_color_pairs():
    dark_palette: Palette = Palette(
        "Godot Dark Icon Theme",
        "Autogenerated from online source. Please adjust manually!",
    )
    light_palette: Palette = Palette(
        "Godot Light Icon Theme",
        "Autogenerated from online source. Please adjust manually!",
    )

    respone = requests.get(
        "https://github.com/godotengine/godot/raw/master/editor/editor_themes.cpp"
    )

    # https://pythex.org/
    pattern = re.compile(
        r'"(#[a-fA-F0-9]{6})".*"(#[a-fA-F0-9]{6})"(?:.*[\/]{2}?[ \t]*(\w+[ \t\w]*))?'
    )
    line_pattern = re.compile(r"\n")

    last_pos: int = -1
    line_count: int = 1

    for result in pattern.finditer(respone.text):
        pos: int = result.start(0)
        for _ in line_pattern.finditer(respone.text, last_pos, pos):
            line_count += 1
        last_pos = pos

        name: str = (
            result.group(3)
            if result.lastindex > 2
            else f"Unnamed color on line {line_count}"
        )
        description: str = f"https://github.com/godotengine/godot/blob/master/editor/editor_themes.cpp#L{line_count}"

        dark_palette.append(
            PaletteEntry(name, description, Color.from_hex_string(result.group(1)))
        )
        light_palette.append(
            PaletteEntry(name, description, Color.from_hex_string(result.group(2)))
        )

    return dark_palette, light_palette


def convert_to_toml(palette: Palette) -> TOMLDocument:
    from tomlkit import aot, comment, document, nl, table

    doc = document()
    doc.add("name", palette.name)
    if palette.description:
        doc.add("description", palette.name)

    entries = aot()
    for element in palette:
        entry = table()
        entry.add("name", element.name)
        if element.description:
            entry.add("description", element.description)
        entry.add("color", element.color.to_hex_string())
        entries.append(entry)
    doc.append("entries", entries)

    return doc
