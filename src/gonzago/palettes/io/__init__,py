# <https://www.cyotek.com/cyotek-palette-editor/supported-palette-formats>
# - 18-bit RGB VGA Palette, pal
# - 24-bit RGB VGA Palette, pal
# - Adobe Colour Table, act
# - Adobe Photoshop Colour Swatch, aco
# - Adobe Swatch Exchange, ase
# - CoreDRAW4, pal, xml
# - DeluxePaint Image, bbm, lbm
# - Fractint, map
# - GIMP, gpl
# - Gravit, gvswatch
# - Hex, hex
# - JASC, pal, PspPalette
# - Microsoft RIFF, pal
# - Paint.NET, txt
# <https://lospec.com/palette-list/fuzzyfour>
# - PNG 1px
# - PNG 8px
# - PNG 32px
# - PAL File (JASC)
# - Photoshop ASE
# - Paint.Net TXT
# - GIMP GPL
# - HEX File
# <https://sk1project.net/palettes/>
# - sK1
# - Inkscape
# - GIMP
# - Scribus
# - Karbon
# - Calligra
# - LibreOffice
# - CorelDRAW, Corel PhotoPaint
# - Adobe Illustrator, Adobe InDesign
# - Adobe Photoshop
# - Xara Designer, Xara Web Designer
# <http://www.selapa.net/swatches/colors/fileformats.php>
# <https://docs.krita.org/en/untranslatable_pages/kpl_defintion.html>
from abc import ABC, abstractmethod
from pathlib import Path

__all__ = ["PaletteReader", "PaletteWriter"]

# TODO: Reader/Writer name and description?
# TODO: Config initialize with and get default values?


class PaletteReader(ABC):
    @abstractmethod
    def get_recognized_extensions(self) -> list[str]:
        return []

    @abstractmethod
    def read(self, file_path: Path):  # -> Palette:
        return None


class PaletteWriter(ABC):
    @abstractmethod
    def get_default_extension(self) -> str:
        return ""

    @abstractmethod
    def write(self, file_path: Path, palette):  # : Palette):
        return None


def find():
    for path in Path(__file__).parent.glob("[!__]*.py"):
        print(path)
